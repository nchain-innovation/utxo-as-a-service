[service]
user_agent = "/Bitcoin SV:1.0.9/"
# network = "mainnet"
network = "testnet"

[mainnet]
ip = ["18.157.234.254"] # Works at tip, does not work 3 blocks down!
# ip = ["18.192.253.59"] # Same as above
# ip = ["13.86.34.113"]
# ip = ["18.157.234.254"]
#ip = ["162.55.95.167"]
# ip = ["65.21.201.45" ]

# ip = ["62.210.211.20"] # version 1.0.6  - did not connect
# ip = ["65.21.201.45"]
# ip = ["18.157.234.254"]
# ip = ["3.67.20.166"] - dropped us
# ip = ["52.28.166.147"] - dropped us
# ip = ["23.92.74.110"] # - dropped after requesting block
port = 8333
start_block_hash = "0000000000000000080a088b22f8f23882c760f8e828f63513fb93d49b4ac7e7" # current tip
start_block_height = 739854

timeout_period = 120.0
block_request_period = 80

startup_load_from_database = true
mysql_url = "mysql://maas:maas-password@localhost:3306/main_uaas_db"
mysql_url_docker = "mysql://maas:maas-password@host.docker.internal:3306/main_uaas_db"

# Python database access
host = "host.docker.internal"
user = "maas"
password = "maas-password"
database = "main_uaas_db"

# Used by Python and Rust
block_file = "../data/main-block.dat"


[testnet]
ip = ["176.9.148.163", "167.99.91.85"]
# ip = [ "176.9.148.163"]
port = 18333

start_block_hash = "000000000001f6f089b463c84c6509707db324f6f8e0c05324e856282c8b33d8"
start_block_height = 1485944

# Note need a larger timeout on testnet
timeout_period = 240.0

# This is the time the service will wait after the last block before requesting another
block_request_period = 80

# The startup_load_from_database option makes the service load the data from the database on startup, or from a file.
# Normally you would load from the database using the setting:
#   startup_load_from_database = true
# Loading from a file is useful the database structure is changed and we and want to repopulate the data without having to redownload all the blocks.
# Note when reading from the file, would expect to delete the following tables:
#   * blocks, tx, utxo, mempool
# Prior to starting the service.

startup_load_from_database = true
# startup_load_from_database = false

mysql_url = "mysql://uaas:uaas-password@localhost:3306/uaas_db"
mysql_url_docker = "mysql://uaas:uaas-password@host.docker.internal:3306/uaas_db"



# Python database access
host = "host.docker.internal"
user = "uaas"
password = "uaas-password"
database = "uaas_db"

# Used by Python and Rust
block_file = "../data/block2.dat"

#[[collection]]
#name = "p2pkh"
#track_descendants = false
#locking_script_pattern = "76a914[0-9a-f]{40}88ac"

#[[collection]]
#name = "not_p2pkh"
#track_descendants = false
#locking_script_pattern = "006a[0-9a-f]*"

[[collection]]
name = "johns"
track_descendants = false
locking_script_pattern = "7576a914[0-9a-f]{40}88ac$"

[web_interface]
address = '127.0.0.1:5010'
log_level = 'info'
reload = false