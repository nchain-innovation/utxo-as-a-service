@startuml
title UaaS-Rust Components

top to bottom direction

class Main {
    main()
}
enum PeerThreadStatus {
    Started
    Connected
    Disconnected
    Finished
}

enum PeerEventType {
    {field} Connected(String)
    Disconnected
    {field} Addr(Addr)
    {field} Tx(Tx)
    {field} Block(Block)
    {field} Headers(Headers)
}

class PeerEventMessage {
    time: SystemTime
    peer: IpAddr
    event: PeerEventType
}


PeerEventMessage o-- PeerEventType


class PeerThread {
    {field} thread: Option<thread::JoinHandle<()>>
    status: PeerThreadStatus
    running: Arc<AtomicBool>
    started_at: Instant
    peer: Option<Arc<Peer>>

}

class ThreadTracker {
    children: HashMap<IpAddr, PeerThread>
    new() -> Self
    add(&mut self, ip, peer)
    print(&self)
    all_finished(&self) -> bool
    set_status(&mut self, ip, status)
    get_connected_peer(&self) -> Option<&Arc<Peer>>
    stop(&mut self, ip)
    join_thread(&mut self, ip)
}

ThreadTracker o-- PeerThread: has_a
PeerThread o-- PeerThreadStatus: has_a


class ThreadManager {
    rx: mpsc::Receiver<PeerEventMessage>
    tx: mpsc::Sender<PeerEventMessage>

    new() -> Self
    create_thread(&mut self, ip, thread_tracker, config)
    process_event(&self, received, thread_tracker, logic) -> bool
    process_messages(&mut self, thread_tracker, logic: &mut Logic,  data)
}

ThreadManager --> ThreadTracker :uses
Main --> ThreadManager


class EventHandler {
    last_event: Mutex<time::Instant>
    mutex_tx: Mutex<mpsc::Sender<PeerEventMessage>>
}

class PeerConnection {
    peer: Arc<Peer>
    event_handler: Arc<EventHandler>

    new(ip, config, tx, rx) -> Self
    wait_for_messages(&self, timeout_period, running)

}

ThreadManager --> PeerConnection : starts_a

EventHandler --> PeerEventMessage: sends
PeerConnection o-- EventHandler: has_a
PeerEventMessage --> ThreadManager: receives




enum ServerStateType {
    Starting
    Disconnected
    Connected
    Ready
}

class Logic {
    state: ServerStateType
    block_manager: BlockManager
    tx_analyser: TxAnalyser
    address_manager: AddressManager
    blocks_downloaded: usize
    last_block_rx_time: Option<Instant>
    need_to_request_blocks: bool
    block_request_period: u64
    message_to_send() -> Option<String>

}
ThreadManager --> Logic : calls

Logic o-- ServerStateType

@enduml
