@startuml
title UaaS-Rust Components

top to bottom direction

class Main {
    main()
}
enum PeerThreadStatus {
    Started
    Connected
    Disconnected
    Finished
}

enum PeerEventType {
    {field} Connected(String)
    Disconnected
    {field} Addr(Addr)
    {field} Tx(Tx)
    {field} Block(Block)
    {field} Headers(Headers)
}

class PeerEventMessage {
    time: SystemTime
    peer: IpAddr
    event: PeerEventType
}


PeerEventMessage o-- PeerEventType


class PeerThread {
    {field} thread: Option<thread::JoinHandle<()>>
    status: PeerThreadStatus
    running: Arc<AtomicBool>
    started_at: Instant
}

class ThreadTracker {
    children: HashMap<IpAddr, PeerThread>
}
ThreadTracker o-- PeerThread: has_a
PeerThread o-- PeerThreadStatus: has_a


class ThreadManager {
    rx: mpsc::Receiver<PeerEventMessage>
    tx: mpsc::Sender<PeerEventMessage>
}

ThreadManager --> ThreadTracker :uses
Main --> ThreadManager

enum RequestMessage {
    BlockRequest<String>
    BroadcastTx<String>
}

class EventHandler {
    last_event: Mutex<time::Instant>
    mutex_tx: Mutex<mpsc::Sender<PeerEventMessage>>
    mutex_rx: Mutex<mpsc::Receiver<RequestMessage>>
}

EventHandler --> RequestMessage: receives

class PeerConnection {
    peer: Arc<Peer>
    event_handler: Arc<EventHandler>
}

PeerThread o-- PeerConnection : has_a

PeerConnection --> PeerEventMessage: sends
PeerConnection --> EventHandler: has_a
PeerEventType --> ThreadManager: receives




enum ServerStateType {
    Starting
    Disconnected
    Connected
    Ready
}

class Logic {
    state: ServerStateType
    block_manager: BlockManager
    tx_analyser: TxAnalyser
    address_manager: AddressManager
    blocks_downloaded: usize
    last_block_rx_time: Option<Instant>
    need_to_request_blocks: bool
    block_request_period: u64
    message_to_send() -> Option<RequestMessage>

}
ThreadManager --> Logic : calls

Logic o-- ServerStateType
ThreadManager --> RequestMessage: sends

@enduml
